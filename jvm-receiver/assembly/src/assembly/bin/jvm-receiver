#!/bin/bash
# resolve links - $0 may be a softlink
if [ -z "$PROJECT_HOME" ];then
  PRG="$0"
  while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
      PRG="$link"
    else
      PRG=`dirname "$PRG"`/"$link"
    fi
  done
  
  cd "$(dirname $PRG)/.." || exit 1
  export PROJECT_HOME=`pwd`
  cd -&>/dev/null
fi

export jvm_receiver_BIN=${jvm_receiver_BIN:-$PROJECT_HOME/bin}
export jvm_receiver_LIB=${jvm_receiver_LIB:-$PROJECT_HOME/lib}
export jvm_receiver_LOG=${jvm_receiver_LOG:-$PROJECT_HOME/log}

# default ####################
HEAP_SIZE=3g
MAIN_CLASS='study.exec.JvmReceiverApplication'

# pallete ####################
function fail() {
  MESSAGE="$1"
  echo -e "\\033[01;31m$MESSAGE\\033[00m"
}

# function ####################
function help() {
cat <<EOF
options
    -g  garbage collection type
          g, g1
          s, serial
          c. cms
          p, parallel
        
    -h  heap size
EOF
}

function find-garbage-collector() {
  case $GARBAGE_COLLECTOR_TYPE in 
    g | g1)
      JAVA_OPTS="$JAVA_OPTS -XX:+UseG1GC"
      ;;
    s | serial)
      JAVA_OPTS="$JAVA_OPTS -XX:+UseSerialGC"
      ;;
    c | cms)
      JAVA_OPTS="$JAVA_OPTS -XX:+UseParNewGC"
      ;;
    p | parallel)
      JAVA_OPTS="$JAVA_OPTS -XX:+UseParallelGC"
      ;;
    *)
      fail "wrong collector type"
      help
      exit 0
  esac
}

function execute() {
  JAVA_OPTS="-server -Xms$HEAP_SIZE -Xmx$HEAP_SIZE -Xloggc:$jvm_receiver_LOG/gclog"
  find-garbage-collector

  JAVA_JAR=$(find "$jvm_receiver_LIB" -name '*.jar' | tr '\n' ':')
  
  java $JAVA_OPTS -cp "$JAVA_JAR" "$MAIN_CLASS"
}

# options ####################
while getopts "g:c:" opt; do
    case $opt in
        "g")
            GARBAGE_COLLECTOR_TYPE=$OPTARG
            ;;
        "h")
            HEAP_SIZE=$OPTARG
            ;;
        *)
           	help
            exit 0
            ;;
    esac
done

# main ####################
if [ -z $GARBAGE_COLLECTOR_TYPE ]
    then 
        help
    else
        execute
fi